#
#
# This is just a simple interface to the winsspi library to support Kerberos
# 

from winsspi.sspi import KerberosSMBSSPI
from winsspi.common.function_defs import ISC_REQ
from minikerberos.gssapi import get_gssapi
from minikerberos.asn1_structs import AP_REQ
from minikerberos.encryption import Enctype, Key

# SMBKerberosSSPICredential:

class SMBKerberosSSPI:
	def __init__(self, settings):
		self.iterations = 0
		self.settings = settings
		self.mode = 'CLIENT'
		self.ksspi = KerberosSMBSSPI()
		self.client = None
		self.target = None
		self.gssapi = None
		self.etype = None
		
		self.setup()
		
	def setup(self):
		self.mode = self.settings.mode
		self.client = self.settings.client
		self.target = self.settings.target
		
	async def encrypt(self, data, message_no):
		return self.gssapi.GSS_Wrap(data, message_no)
		
	async def decrypt(self, data, message_no, direction='init', auth_data=None):
		return self.gssapi.GSS_Unwrap(data, message_no, direction=direction, auth_data=auth_data)
	
	def get_session_key(self):
		return self.ksspi.get_session_key()
	
	async def authenticate(self, authData = None, flags = None, seq_number = 0, is_rpc = False):
		#authdata is only for api compatibility reasons
		if is_rpc == True:
			if self.iterations == 0:
				flags = ISC_REQ.CONFIDENTIALITY | ISC_REQ.INTEGRITY | ISC_REQ.SEQUENCE_DETECT|\
					ISC_REQ.REPLAY_DETECT | ISC_REQ.MUTUAL_AUTH | ISC_REQ.USE_DCE_STYLE
				token = self.ksspi.get_ticket_for_spn(self.target, flags = flags, is_rpc = True, token_data = authData)
			
			
				etype = AP_REQ.load(token).native['authenticator']['etype']
				if etype == 17:
					self.etype = Enctype.AES128
				elif etype == 18:
					self.etype = Enctype.AES256
				elif etype == 23:
					self.etype = Enctype.RC4
				else:
					raise Exception('Unsupported encryption type!')
				
				self.iterations += 1
				return token, False
			
			else:
				flags = ISC_REQ.CONFIDENTIALITY | ISC_REQ.INTEGRITY | ISC_REQ.SEQUENCE_DETECT|\
					ISC_REQ.REPLAY_DETECT | ISC_REQ.MUTUAL_AUTH | ISC_REQ.USE_DCE_STYLE
				token = self.ksspi.get_ticket_for_spn(self.target, flags = flags, is_rpc = True, token_data = authData)
			
				session_key = Key(self.etype, self.get_session_key())
				input(session_key.contents)
				self.gssapi = get_gssapi(session_key)
				print(self.gssapi)
				self.iterations += 1
				return token, False
			
		else:
			apreq = self.ksspi.get_ticket_for_spn(self.target)
			return apreq, False
		